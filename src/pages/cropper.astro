---
import Base from "../components/base.astro";
---

<Base>
	<main>
		<section class="hidden">
			<div id="selectionBorder"></div>
			<div id="selectionInner"></div>
		</section>
	</main>
</Base>

<style>
	main {
		width: 100%;
		height: 100%;
		overflow: hidden;
		cursor: crosshair;
		position: relative;
		/* background: rgba(0, 0, 0, 0.4); */
	}
	section {
		position: absolute;
	}

	#selectionInner {
		position: absolute;
		width: 100%;
		height: 100%;
	}

	section::before,
	section::after,
	#selectionInner::before,
	#selectionInner::after {
		content: "";
		position: absolute;
		width: 100%;
		height: 100vh;
		background: rgba(0, 0, 0, 0.4);
	}

	section::before {
		top: 100%;
	}

	section::after {
		bottom: 100%;
	}

	#selectionInner::before,
	#selectionInner::after {
		width: 100vw;
		height: 200vh;
		top: -100vh;
		bottom: 0;
	}

	#selectionInner::before {
		left: 100%;
	}

	#selectionInner::after {
		right: 100%;
	}

	#selectionBorder {
		height: calc(100% - 4px);
		width: calc(100% - 4px);
		border: 2px dashed white;
		display: block;
	}
	.hidden {
		transform: scale(0);
	}
</style>

<script>
	import { invoke } from "@tauri-apps/api/tauri";
	import { getCurrent } from "@tauri-apps/api/window";

	let isSelecting = false;
	let isToolbarVisible = false;
	let startX = 0;
	let startY = 0;
	let endX = 0;
	let endY = 0;

	// Constants
	const selectionEl = document.querySelector("section")!;
	const selectableAreaEl = document.querySelector("main")!;

	// Events
	selectableAreaEl.addEventListener("mousedown", (e) => {
		isSelecting = true;
		selectionEl.classList.remove("hidden");
		startX = e.clientX - selectableAreaEl.offsetLeft;
		startY = e.clientY - selectableAreaEl.offsetTop;
		if (isToolbarVisible) {
			console.log("invoking hide toolbar");
			invoke("hide_toolbar").then(() => {
				console.log("hide toolbar");
			});
			isToolbarVisible = false;
		}
	});

	selectableAreaEl.addEventListener("mousemove", (e) => {
		if (isSelecting) {
			endX = e.clientX - selectableAreaEl.offsetLeft;
			endY = e.clientY - selectableAreaEl.offsetTop;

			const width = endX - startX;
			const height = endY - startY;

			selectionEl.style.width = `${Math.abs(width)}px`;
			selectionEl.style.height = `${Math.abs(height)}px`;
			selectionEl.style.left = `${width > 0 ? startX : endX}px`;
			selectionEl.style.top = `${height > 0 ? startY : endY}px`;
		}
	});

	selectableAreaEl.addEventListener("mouseup", () => {
		if (isSelecting) {
			const buttonX = startX > endX ? endX - 24 : endX;
			const buttonY = startY > endY ? endY - 24 : endY;

			isToolbarVisible = true;
			invoke("show_toolbar", {
				buttonCoords: [buttonX, buttonY],
				area: [startX, startY, endX, endY],
			}).then(() => {
				console.log("mouse up is registered");
			});
		}
		isSelecting = false;
	});

	function closeCropper() {
		const win = getCurrent();
		selectionEl.style.width = "0px";
		selectionEl.style.height = "0px";
		selectionEl.style.left = "0px";
		selectionEl.style.top = "0px";
		win.hide();
	}

	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape") {
			closeCropper();
		}
	});
</script>
