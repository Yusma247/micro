---
import Base from "../components/base.astro";
---

<Base>
	<main>
		<section class="hidden">
			<div id="selectionBorder"></div>
			<div id="selectionInner"></div>
		</section>
	</main>
</Base>

<style>
	main {
		width: 100%;
		height: 100%;
		overflow: hidden;
		cursor: crosshair;
		position: relative;
		/* background: rgba(0, 0, 0, 0.4); */
	}
	section {
		position: absolute;
	}

	#selectionInner {
		position: absolute;
		width: 100%;
		height: 100%;
	}

	section::before,
	section::after,
	#selectionInner::before,
	#selectionInner::after {
		content: "";
		position: absolute;
		width: 100%;
		height: 100vh;
		background: rgba(0, 0, 0, 0.4);
	}

	section::before {
		top: 100%;
	}

	section::after {
		bottom: 100%;
	}

	#selectionInner::before,
	#selectionInner::after {
		width: 100vw;
		height: 200vh;
		top: -100vh;
		bottom: 0;
	}

	#selectionInner::before {
		left: 100%;
	}

	#selectionInner::after {
		right: 100%;
	}

	#selectionBorder {
		height: calc(100% - 4px);
		width: calc(100% - 4px);
		border: 2px dashed white;
		display: block;
	}
	.hidden {
		transform: scale(0);
	}

	.recording {
		pointer-events: none;
	}
</style>

<script>
	import { invoke } from "@tauri-apps/api/core";
	import { listen } from "@tauri-apps/api/event";
	import { getCurrent } from "@tauri-apps/api/window";

	let isSelecting = false;
	let isToolbarVisible = false;
	let startX = 0;
	let startY = 0;
	let endX = 0;
	let endY = 0;

	// Constants
	const selectionEl = document.querySelector("section");
	const selectableAreaEl = document.querySelector("main");

	// Check if elements are found
	if (!selectionEl || !selectableAreaEl) {
		console.error("Unable to find necessary elements.");
	}
	// Listen for events from the Rust side
	listen("capture-started", () => {
		selectableAreaEl!.classList.add("recording");
	});

	listen("capture-stopped", () => {
		selectableAreaEl!.classList.remove("recording");
	});

	selectableAreaEl!.addEventListener("mousedown", (e) => {
		isSelecting = true;
		selectionEl!.classList.remove("hidden");
		startX = e.clientX - selectableAreaEl!.offsetLeft;
		startY = e.clientY - selectableAreaEl!.offsetTop;
		if (isToolbarVisible) {
			hideToolbar();
		}
	});

	selectableAreaEl!.addEventListener("mousemove", (e) => {
		if (isSelecting) {
			updateSelection(e);
		}
	});

	selectableAreaEl!.addEventListener("mouseup", () => {
		if (isSelecting) {
			const buttonX = startX > endX ? endX - 24 : endX;
			const buttonY = startY > endY ? endY - 24 : endY;
			showToolbar(buttonX, buttonY);
		}
		isSelecting = false;
	});

	function updateSelection(e: any) {
		endX = e.clientX - selectableAreaEl!.offsetLeft;
		endY = e.clientY - selectableAreaEl!.offsetTop;
		const width = endX - startX;
		const height = endY - startY;
		selectionEl!.style.width = `${Math.abs(width)}px`;
		selectionEl!.style.height = `${Math.abs(height)}px`;
		selectionEl!.style.left = `${width > 0 ? startX : endX}px`;
		selectionEl!.style.top = `${height > 0 ? startY : endY}px`;
	}

	function hideToolbar() {
		invoke("hide_toolbar");
		isToolbarVisible = false;
	}

	function showToolbar(buttonX: number, buttonY: number) {
		invoke("show_toolbar", {
			buttonCoords: [buttonX, buttonY],
			area: [startX + 2, startY + 2, endX - 7, endY - 7], // added these number using trial and error to remove border from the captured frame
		});
		isToolbarVisible = true;
	}

	function closeCropper() {
		const win = getCurrent();
		selectionEl!.style.width = "0px";
		selectionEl!.style.height = "0px";
		selectionEl!.style.left = "0px";
		selectionEl!.style.top = "0px";
		win.hide();
	}

	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape") {
			closeCropper();
		}
	});
</script>
